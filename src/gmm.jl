lower_bound(::Type{MV}, Rₙ::AbstractVector{T},
            Rₙₖ::AbstractMatrix{T}) where {T<:AbstractFloat, MV<:MultivariateNormal} = sum(Rₙ)

"Gaussian Mixture Model"
function fit_mm(::Type{MV}, X::AbstractMatrix{T}, k::Int;
                tol::Real=1e-5,             # convergence tolerance
                maxiter::Integer=100,       # number of iterations
                μs::Union{AbstractArray{T,2}, Nothing} = nothing,
                Σs::Union{AbstractArray{T,3}, Nothing} = nothing,
                homoscedastic::Bool=false,
                init::Symbol=:kmeans,
                logprob::Bool=true,
                covreg::Real=1e-6,
                aitken::Bool=false
            ) where {T<:AbstractFloat, MV<:MultivariateNormal}

    d, n = size(X)
    Rₙ = zeros(T, n)
    Σ  = zeros(T, d, d)
    Z = similar(X)

    # initialize parameters
    πₖ, μₖ, Σₖ, Rₙₖ = initialize(MV, X, k, init=init)
    Tmpₙ, TmpC = auxiliary(MV, X, k)

    ℒ = ℒ′ₐ = ℒₐ = ℒ′′ = ℒ′ = Δℒ = typemin(T)
    for itr in 1:maxiter

        # E Step: Calculate posterior probability
        #   Rₙₖ = E[ωₖ|x] = p(ωₖ=1|x) ∝ πₖ⋅p(x|ωₖ) = πₖ⋅(√(2π)^(-d/2)*|Σₖ⁻¹|)⋅exp(-0.5⋅(x-μₖ)ᵀΣₖ⁻¹(x-μₖ))
        # where ωₖ is the mixture indicator variable, s.t. ωₖ = 1 when the data point was generated by mixture ωₖ
        for j in 1:k
            # calculate responsibilities
            μ = μₖ[:,j]
            Σ = Σₖ[:,:,j]
            R = view(Rₙₖ,:,j)
            if logprob
                F = factorize(MV, Σ)
                # logpdf!(R, Hermitian(Σ), μ, X, Z)
                logpdf!(R, X, μ, F, Z)
                R .+= log(πₖ[j])
            else
                pdf!(R, X, μ, Hermitian(Σ), Z)
                R .*= πₖ[j]
            end
        end
        # Calculate (log) responsibilities
        if logprob
            logsumexp!(Rₙ, Rₙₖ, Tmpₙ)
        else
            Rₙₖ[Rₙₖ .< eps(T)] .= eps(T)
            sum!(Rₙ, Rₙₖ)
            Rₙₖ ./= Rₙ
        end

        # Calculate lower bound value on the complete log-likelihood
        ℒ′′ = ℒ′
        ℒ′ = ℒ
        ℒ = lower_bound(MV, (logprob ? Rₙ : caplog.(Rₙ)), Rₙₖ)

        # M Step: Calculate parameters
        stats!(πₖ, μₖ, X, Rₙₖ)
        covariances!(Σₖ, πₖ, μₖ, X, Rₙₖ, MV, covreg=covreg, aux=TmpC)
        πₖ ./= n

        if homoscedastic
            Σₖ[:,:,1] .*= πₖ[1]
            for j in 2:k
                Σⱼ = view(Σₖ,:,:,j)
                Σⱼ .*= πₖ[j]
                Σₖ[:,:,1] .+= Σⱼ
            end
            for j in 2:k
                Σₖ[:,:,j] .= copy(Σₖ[:,:,1])
            end
        end

        # Check convergence
        Δℒ = ℒ - ℒ′
        # aitken accelerated criterion
        if aitken
            a = Δℒ/(ℒ′-ℒ′′)
            ℒ′ₐ = ℒₐ
            ℒₐ = ℒ′+Δℒ/(1-a)
            Δℒ=ℒ′ₐ-ℒₐ
        end
        @debug "Likelihood" itr ℒ Δℒ
        abs(Δℒ) < tol && break
    end

    if Δℒ > tol
        @warn "No convergence" Δℒ=Δℒ tol=tol
    end

    return MixtureModel([distribution(MV, μₖ, Σₖ, j) for j in 1:k], πₖ)
end

distribution(::Type{FullNormal}, μₖ, Σₖ, j) = MvNormal(μₖ[:,j], Symmetric(Σₖ[:,:,j]))
distribution(::Type{DiagNormal}, μₖ, Σₖ, j) = MvNormal(μₖ[:,j], Diagonal(Σₖ[:,1,j]))
distribution(::Type{IsoNormal}, μₖ, Σₖ, j) = MvNormal(μₖ[:,j], Σₖ[1,1,j])
